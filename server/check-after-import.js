const { PrismaClient } = require('@prisma/client');

async function checkAfterImport() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç === V√âRIFICATION APR√àS IMPORT ===\n');
    
    const cjSupplier = await prisma.supplier.findFirst({
      where: { name: 'CJ Dropshipping' }
    });
    
    // 1. Compter les produits apr√®s import
    const productsAfter = await prisma.product.count({
      where: { supplierId: cjSupplier.id }
    });
    console.log(`üìä Produits CJ dans Product apr√®s import: ${productsAfter}`);
    
    // 2. V√©rifier les produits avec et sans cat√©gorie
    const productsWithCategory = await prisma.product.count({
      where: { 
        supplierId: cjSupplier.id,
        categoryId: { not: null }
      }
    });
    
    const productsWithoutCategory = await prisma.product.count({
      where: { 
        supplierId: cjSupplier.id,
        categoryId: null
      }
    });
    
    console.log(`‚úÖ Produits AVEC cat√©gorie: ${productsWithCategory}`);
    console.log(`‚ùå Produits SANS cat√©gorie: ${productsWithoutCategory}`);
    
    // 3. D√©tails des produits r√©cemment import√©s
    const recentProducts = await prisma.product.findMany({
      where: { supplierId: cjSupplier.id },
      orderBy: { createdAt: 'desc' },
      take: 5,
      select: {
        id: true,
        name: true,
        categoryId: true,
        category: { select: { name: true } },
        createdAt: true
      }
    });
    
    console.log(`\nüì¶ 5 produits les plus r√©cents:`);
    recentProducts.forEach(p => {
      console.log(`   - ${p.name.substring(0, 50)}...`);
      console.log(`     Cat√©gorie: ${p.category?.name || 'NON MAPP√âE'} (ID: ${p.categoryId || 'NULL'})`);
      console.log(`     Cr√©√©: ${p.createdAt.toISOString()}`);
      console.log('');
    });
    
    // 4. √âtat du magasin CJ
    const storeStatus = await prisma.cJProductStore.groupBy({
      by: ['status'],
      _count: { status: true }
    });
    
    console.log(`\nüè™ √âtat du magasin CJ:`);
    storeStatus.forEach(s => {
      console.log(`   - ${s.status}: ${s._count.status} produits`);
    });
    
    // 5. Cat√©gories non mapp√©es mises √† jour
    const unmappedCategories = await prisma.unmappedExternalCategory.findMany({
      where: { supplierId: cjSupplier.id }
    });
    
    console.log(`\nüè∑Ô∏è Cat√©gories non mapp√©es: ${unmappedCategories.length}`);
    unmappedCategories.forEach(cat => {
      console.log(`   - "${cat.externalCategory}" | ${cat.productCount} produits`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkAfterImport();