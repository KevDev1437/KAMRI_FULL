// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart      CartItem[]
  orders    Order[]
  addresses Address[]
  reviews   Review[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Float
  originalPrice Float?   // Prix original du fournisseur
  image         String?
  images        String[] // Images multiples
  categoryId    String
  supplierId    String?  // ID du fournisseur (dropshipping)
  sku           String?  // SKU du fournisseur
  stock         Int      @default(0)
  weight        Float?   // Poids en kg
  dimensions    Json?    // {length, width, height}
  attributes    Json?    // Attributs personnalisés
  status        String   @default("active") // active, inactive, out_of_stock
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category    Category    @relation(fields: [categoryId], references: [id])
  supplier    Supplier?   @relation(fields: [supplierId], references: [id])
  images      Image[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("products")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  productId String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("images")
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String
  productId String
  quantity  Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Float
  status    String @default("PENDING")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String  @default("US")
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// ===== DROPSHIPPING MODELS =====

model Supplier {
  id        String   @id @default(cuid())
  name      String
  apiUrl    String
  apiKey    String
  type      String   // dropshipping, wholesale, marketplace
  status    String   @default("pending") // active, inactive, pending
  settings  Json     // Configuration du fournisseur
  lastSync  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]
  syncLogs SyncLog[]

  @@map("suppliers")
}

model SyncLog {
  id          String   @id @default(cuid())
  supplierId  String
  status      String   // success, failed, partial
  productsAdded    Int @default(0)
  productsUpdated  Int @default(0)
  productsSkipped  Int @default(0)
  errors      Json?    // Liste des erreurs
  duration    Int      // Durée en ms
  createdAt   DateTime @default(now())

  // Relations
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("sync_logs")
}

model DashboardUser {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String   @default("admin") // admin, manager, viewer
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dashboard_users")
}


