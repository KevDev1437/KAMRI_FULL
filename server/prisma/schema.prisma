// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./prisma/dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  firstName String?  // Pr√©nom
  lastName  String?  // Nom de famille
  phone     String?  // T√©l√©phone
  address   String?  // Adresse principale
  password  String   // Mot de passe hash√©
  role      String   @default("user") // user, admin
  status    String   @default("active") // active, suspended, inactive
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart         CartItem[]
  orders       Order[]
  addresses    Address[]
  reviews      Review[]
  wishlist     Wishlist[]
  userSettings UserSettings? // ‚úÖ Added user settings relation

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  nameEn      String?   // Nom en anglais
  description String?
  icon        String?   @default("üõçÔ∏è")
  color       String?   @default("#4CAF50")
  externalId  String?   // ID externe (CJ, etc.)
  parentId    String?   // ID parent pour hi√©rarchie
  level       Int?      // Niveau dans la hi√©rarchie
  isActive    Boolean   @default(true)
  isDefault   Boolean   @default(false) // ‚úÖ Cat√©gories par d√©faut non supprimables
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id               String   @id @default(cuid())
  name             String
  description      String?
  price            Float
  originalPrice    Float?
  image            String?
  categoryId       String?
  supplierId       String?
  externalCategory String?  // Cat√©gorie externe du fournisseur
  source           String?  // Source du produit: dummy-json, cj-dropshipping, manual
  status           String   @default("pending") // pending, active, inactive, rejected
  badge            String? // promo, tendances, nouveau, top-ventes
  stock            Int      @default(0)
  sales            Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // ‚úÖ CJ Dropshipping - Donn√©es d√©taill√©es avec contraintes anti-doublons
  cjProductId      String?  @unique // ‚úÖ ID produit CJ unique pour √©viter doublons
  productSku       String?  // SKU du produit CJ (peut √™tre dupliqu√© entre fournisseurs)
  productWeight    String?  // Poids du produit (peut √™tre une plage)
  packingWeight    String?  // Poids d'emballage
  productType      String?  // Type de produit CJ
  productUnit      String?  // Unit√© du produit
  productKeyEn     String?  // Attributs/cl√©s du produit
  materialNameEn   String?  // Mat√©riau (ex: "Cloth")
  packingNameEn    String?  // Type d'emballage (ex: "Plastic bags")
  suggestSellPrice String?  // Prix de vente sugg√©r√© CJ (peut √™tre une plage)
  listedNum        Int?     // Nombre de listings
  supplierName     String?  // Nom du fournisseur
  createrTime      String?  // Date de cr√©ation CJ
  variants         String?  // JSON des variants CJ
  cjReviews        String?  // JSON des avis CJ (pour √©viter conflit avec reviews relation)
  dimensions       String?  // Dimensions du produit
  brand            String?  // Marque
  tags             String?  // JSON des tags
  
  // ‚úÖ Tracking de l'import pour √©viter doublons
  importStatus     String?  @default("new") // new, updated, imported, duplicate
  lastImportAt     DateTime? // Derni√®re date d'import

  // Relations
  category      Category?     @relation(fields: [categoryId], references: [id])
  supplier      Supplier?     @relation(fields: [supplierId], references: [id])
  images        Image[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlist      Wishlist[]
  cjMapping     CJProductMapping?

  @@map("products")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  productId String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("images")
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String
  productId String
  quantity  Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Float
  status    String @default("PENDING")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]
  cjMapping CJOrderMapping?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String  @default("US")
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Nouveaux mod√®les pour le dropshipping
model Supplier {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  apiUrl      String
  apiKey      String
  status      String   @default("disconnected") // connected, disconnected, pending
  lastSync    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products        Product[]
  categoryMappings CategoryMapping[]
  unmappedCategories UnmappedExternalCategory[]

  @@map("suppliers")
}

model CategoryMapping {
  id               String   @id @default(cuid())
  supplierId       String
  externalCategory String
  internalCategory String
  status           String   @default("mapped") // mapped, pending, failed
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([supplierId, externalCategory])
  @@map("category_mappings")
}

model UnmappedExternalCategory {
  id              String   @id @default(cuid())
  externalCategory String
  supplierId      String
  detectedAt      DateTime @default(now())
  productCount    Int      @default(0)

  // Relations
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([supplierId, externalCategory])
  @@map("unmapped_external_categories")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist")
}

model Settings {
  id                String   @id @default(cuid())
  theme             String   @default("light") // light, dark
  currency          String   @default("EUR") // EUR, USD, GBP
  language          String   @default("fr") // fr, en, es, de
  accentColor       String   @default("#4CAF50")
  companyName       String   @default("KAMRI")
  companyEmail      String?
  companyPhone      String?
  companyAddress    String?
  apiRateLimit      Int      @default(1000)
  autoSync          Boolean  @default(true)
  notifications     Boolean  @default(true)
  emailNotifications Boolean @default(true)
  smsNotifications  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("settings")
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Param√®tres de notification (stock√©s comme String JSON)
  notifications String @default("{\"email\": true, \"sms\": false, \"push\": true, \"marketing\": false}")

  // Param√®tres de confidentialit√© (stock√©s comme String JSON)
  privacy String @default("{\"profileVisible\": true, \"orderHistory\": false, \"dataSharing\": false}")

  // Pr√©f√©rences utilisateur (stock√©s comme String JSON)
  preferences String @default("{\"theme\": \"light\", \"language\": \"fr\", \"currency\": \"EUR\"}")

  @@map("user_settings")
}

// ===== MOD√àLES CJ DROPSHIPPING =====

// Configuration CJ Dropshipping
model CJConfig {
  id            String   @id @default(cuid())
  email         String
  apiKey        String
  tier          String   @default("free") // free, plus, prime, advanced
  platformToken String?
  enabled       Boolean  @default(true)
  accessToken   String?
  refreshToken  String?
  tokenExpiry   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("cj_configs")
}

// Magasin CJ Dropshipping
model CJProductStore {
  id            String   @id @default(cuid())
  cjProductId   String   @unique
  name          String
  description   String?
  price         Float
  originalPrice Float?
  image         String?
  category      String?
  status        String   @default("available") // available, selected, imported
  isFavorite    Boolean  @default(false) // Marquer comme favori CJ
  
  // üîß AJOUTER TOUS LES CHAMPS D√âTAILL√âS
  productSku        String?
  productWeight     String?
  packingWeight     String?
  productType       String?
  productUnit       String?
  productKeyEn      String?
  materialNameEn    String?
  packingNameEn     String?
  suggestSellPrice  String?
  listedNum         Int?
  supplierName      String?
  createrTime       String?
  variants          String? // JSON string
  reviews           String? // JSON string
  dimensions        String?
  brand             String?
  tags              String? // JSON string
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("cj_product_store")
}

// Mapping produits CJ
model CJProductMapping {
  id          String   @id @default(cuid())
  productId   String   @unique // ID produit KAMRI
  cjProductId String   // PID CJ
  cjSku       String
  lastSyncAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([cjProductId])
  @@map("cj_product_mappings")
}

// Mapping commandes CJ
model CJOrderMapping {
  id            String   @id @default(cuid())
  orderId       String   @unique // ID commande KAMRI
  cjOrderId     String   // CJ order ID
  cjOrderNumber String   // orderNumber envoy√© √† CJ
  status        String   // CREATED, PAID, SHIPPED, etc.
  trackNumber   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([cjOrderId])
  @@map("cj_order_mappings")
}

// Logs webhooks CJ
model CJWebhookLog {
  id        String   @id @default(cuid())
  type      String   // PRODUCT, STOCK, ORDER, LOGISTICS
  messageId String   @unique
  payload   String   // JSON string
  processed Boolean  @default(false)
  error     String?
  createdAt DateTime @default(now())

  @@index([type, processed])
  @@map("cj_webhook_logs")
}


