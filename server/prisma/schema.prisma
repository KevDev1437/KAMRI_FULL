// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("user") // user, admin
  status    String   @default("active") // active, suspended, inactive
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart      CartItem[]
  orders    Order[]
  addresses Address[]
  reviews   Review[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Float
  originalPrice Float?
  image         String?
  categoryId    String
  supplierId    String?
  status        String   @default("pending") // pending, active, inactive, rejected
  badge         String? // promo, tendances, nouveau, top-ventes
  stock         Int      @default(0)
  sales         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category      Category      @relation(fields: [categoryId], references: [id])
  supplier      Supplier?     @relation(fields: [supplierId], references: [id])
  images        Image[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]

  @@map("products")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  productId String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("images")
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String
  productId String
  quantity  Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Float
  status    String @default("PENDING")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String  @default("US")
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Nouveaux mod√®les pour le dropshipping
model Supplier {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  apiUrl      String
  apiKey      String
  status      String   @default("disconnected") // connected, disconnected, pending
  lastSync    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products        Product[]
  categoryMappings CategoryMapping[]

  @@map("suppliers")
}

model CategoryMapping {
  id               String   @id @default(cuid())
  supplierId       String
  externalCategory String
  internalCategory String
  status           String   @default("mapped") // mapped, pending, failed
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([supplierId, externalCategory])
  @@map("category_mappings")
}

model Settings {
  id                String   @id @default(cuid())
  theme             String   @default("light") // light, dark
  currency          String   @default("EUR") // EUR, USD, GBP
  language          String   @default("fr") // fr, en, es, de
  accentColor       String   @default("#4CAF50")
  companyName       String   @default("KAMRI")
  companyEmail      String?
  companyPhone      String?
  companyAddress    String?
  apiRateLimit      Int      @default(1000)
  autoSync          Boolean  @default(true)
  notifications     Boolean  @default(true)
  emailNotifications Boolean @default(true)
  smsNotifications  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("settings")
}


