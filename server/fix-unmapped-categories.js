const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixUnmappedCategories() {
  console.log('üîß Correction des compteurs de cat√©gories non mapp√©es...\n');

  try {
    // 1. R√©cup√©rer toutes les entr√©es de unmappedExternalCategory
    const unmappedCategories = await prisma.unmappedExternalCategory.findMany();
    
    console.log(`üìã ${unmappedCategories.length} cat√©gories non mapp√©es trouv√©es\n`);

    for (const category of unmappedCategories) {
      console.log(`üîç V√©rification: ${category.externalCategory}`);
      console.log(`   Compteur actuel: ${category.productCount}`);
      
      // 2. R√©cup√©rer le nom du fournisseur
      const supplier = await prisma.supplier.findUnique({
        where: { id: category.supplierId }
      });
      
      // 3. Compter les vrais produits avec cette cat√©gorie externe
      const actualCount = await prisma.product.count({
        where: {
          externalCategory: category.externalCategory,
          supplierId: category.supplierId
        }
      });
      
      console.log(`   Compteur r√©el: ${actualCount}`);
      console.log(`   Fournisseur: ${supplier?.name || 'Non trouv√©'}`);
      
      if (actualCount !== category.productCount) {
        if (actualCount === 0) {
          // Supprimer l'entr√©e si plus aucun produit
          await prisma.unmappedExternalCategory.delete({
            where: {
              id: category.id
            }
          });
          console.log(`   ‚ùå Entr√©e supprim√©e (plus de produits)`);
        } else {
          // Mettre √† jour le compteur
          await prisma.unmappedExternalCategory.update({
            where: {
              id: category.id
            },
            data: {
              productCount: actualCount
            }
          });
          console.log(`   ‚úÖ Compteur mis √† jour: ${category.productCount} ‚Üí ${actualCount}`);
        }
      } else {
        console.log(`   ‚úì Compteur d√©j√† correct`);
      }
      console.log('');
    }

    // 3. V√©rifier s'il y a des produits avec cat√©gories externes qui ne sont pas dans unmappedExternalCategory
    const productsWithExternalCategories = await prisma.product.findMany({
      where: {
        externalCategory: {
          not: null
        },
        categoryId: null // Non mapp√©s
      },
      select: {
        externalCategory: true,
        supplierId: true
      }
    });

    // Grouper par cat√©gorie + fournisseur
    const categoryGroups = {};
    productsWithExternalCategories.forEach(product => {
      const key = `${product.externalCategory}|${product.supplierId}`;
      if (!categoryGroups[key]) {
        categoryGroups[key] = {
          externalCategory: product.externalCategory,
          supplierId: product.supplierId,
          count: 0
        };
      }
      categoryGroups[key].count++;
    });

    // 4. Cr√©er les entr√©es manquantes
    for (const key in categoryGroups) {
      const group = categoryGroups[key];
      
      const existing = await prisma.unmappedExternalCategory.findFirst({
        where: {
          externalCategory: group.externalCategory,
          supplierId: group.supplierId
        }
      });

      if (!existing) {
        await prisma.unmappedExternalCategory.create({
          data: {
            externalCategory: group.externalCategory,
            supplierId: group.supplierId,
            productCount: group.count
          }
        });
        console.log(`‚ûï Nouvelle entr√©e cr√©√©e: ${group.externalCategory} (${group.count} produits)`);
      }
    }

    // 5. V√©rification finale
    console.log('\nüìä √âtat final:');
    const finalCategories = await prisma.unmappedExternalCategory.findMany({
      orderBy: {
        productCount: 'desc'
      }
    });

    finalCategories.forEach((cat, index) => {
      console.log(`${index + 1}. ${cat.externalCategory}`);
      console.log(`   - Produits: ${cat.productCount}`);
      console.log(`   - Fournisseur ID: ${cat.supplierId}`);
      console.log(`   - D√©tect√©: ${cat.detectedAt}`);
      console.log('');
    });

    console.log('‚úÖ Synchronisation termin√©e !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixUnmappedCategories();