const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkImportCompleteness() {
  console.log('üîç V√©rification de la compl√©tude des donn√©es import√©es CJ...\n');

  try {
    // 1. R√©cup√©rer un produit CJ pour analyser ce qui est sauvegard√©
    const cjProduct = await prisma.cJProductStore.findFirst({
      orderBy: { createdAt: 'desc' }
    });

    if (!cjProduct) {
      console.log('‚ùå Aucun produit CJ trouv√©');
      return;
    }

    console.log('üì¶ Produit CJ analys√©:');
    console.log(`   - Nom: ${cjProduct.name}`);
    console.log(`   - CJ Product ID: ${cjProduct.cjProductId}`);
    console.log('');

    // 2. Analyser chaque champ important
    console.log('üìä Analyse des donn√©es sauvegard√©es:');
    
    // Informations de base
    console.log('üè∑Ô∏è Informations de base:');
    console.log(`   - Nom: ${cjProduct.name ? '‚úÖ' : '‚ùå'} ${cjProduct.name || 'Manquant'}`);
    console.log(`   - Description: ${cjProduct.description ? '‚úÖ' : '‚ùå'} ${cjProduct.description ? 'Pr√©sente' : 'Manquante'}`);
    console.log(`   - Prix: ${cjProduct.price ? '‚úÖ' : '‚ùå'} $${cjProduct.price || 'Manquant'}`);
    console.log(`   - Prix original: ${cjProduct.originalPrice ? '‚úÖ' : '‚ùå'} $${cjProduct.originalPrice || 'Manquant'}`);
    console.log(`   - Image: ${cjProduct.image ? '‚úÖ' : '‚ùå'} ${cjProduct.image ? 'Pr√©sente' : 'Manquante'}`);
    console.log(`   - Cat√©gorie: ${cjProduct.category ? '‚úÖ' : '‚ùå'} ${cjProduct.category || 'Manquante'}`);
    console.log('');

    // Informations CJ sp√©cifiques
    console.log('üîß Informations CJ sp√©cifiques:');
    console.log(`   - Product SKU: ${cjProduct.productSku ? '‚úÖ' : '‚ùå'} ${cjProduct.productSku || 'Manquant'}`);
    console.log(`   - Product Weight: ${cjProduct.productWeight ? '‚úÖ' : '‚ùå'} ${cjProduct.productWeight || 'Manquant'}`);
    console.log(`   - Packing Weight: ${cjProduct.packingWeight ? '‚úÖ' : '‚ùå'} ${cjProduct.packingWeight || 'Manquant'}`);
    console.log(`   - Product Type: ${cjProduct.productType ? '‚úÖ' : '‚ùå'} ${cjProduct.productType || 'Manquant'}`);
    console.log(`   - Product Unit: ${cjProduct.productUnit ? '‚úÖ' : '‚ùå'} ${cjProduct.productUnit || 'Manquant'}`);
    console.log(`   - Material Name EN: ${cjProduct.materialNameEn ? '‚úÖ' : '‚ùå'} ${cjProduct.materialNameEn || 'Manquant'}`);
    console.log(`   - Packing Name EN: ${cjProduct.packingNameEn ? '‚úÖ' : '‚ùå'} ${cjProduct.packingNameEn || 'Manquant'}`);
    console.log(`   - Product Key EN: ${cjProduct.productKeyEn ? '‚úÖ' : '‚ùå'} ${cjProduct.productKeyEn || 'Manquant'}`);
    console.log('');

    // Prix et marketing
    console.log('üí∞ Prix et marketing:');
    console.log(`   - Suggest Sell Price: ${cjProduct.suggestSellPrice ? '‚úÖ' : '‚ùå'} ${cjProduct.suggestSellPrice || 'Manquant'}`);
    console.log(`   - Listed Num: ${cjProduct.listedNum ? '‚úÖ' : '‚ùå'} ${cjProduct.listedNum || 'Manquant'}`);
    console.log(`   - Supplier Name: ${cjProduct.supplierName ? '‚úÖ' : '‚ùå'} ${cjProduct.supplierName || 'Manquant'}`);
    console.log('');

    // Variants
    console.log('üé® Variants:');
    if (cjProduct.variants) {
      try {
        const variants = typeof cjProduct.variants === 'string' 
          ? JSON.parse(cjProduct.variants) 
          : cjProduct.variants;
        
        console.log(`   - Variants: ‚úÖ ${variants.length} variants sauvegard√©s`);
        
        if (variants.length > 0) {
          const firstVariant = variants[0];
          console.log('   üìã Premier variant contient:');
          Object.keys(firstVariant).forEach(key => {
            const value = firstVariant[key];
            const hasValue = value !== null && value !== undefined && value !== '';
            console.log(`      - ${key}: ${hasValue ? '‚úÖ' : '‚ùå'} ${hasValue ? (typeof value === 'object' ? 'Objet pr√©sent' : String(value).slice(0, 30) + '...') : 'Manquant'}`);
          });
        }
      } catch (e) {
        console.log(`   - Variants: ‚ùå Erreur parsing: ${e.message}`);
      }
    } else {
      console.log('   - Variants: ‚ùå Manquants');
    }
    console.log('');

    // Reviews
    console.log('‚≠ê Reviews:');
    if (cjProduct.reviews) {
      try {
        const reviews = typeof cjProduct.reviews === 'string' 
          ? JSON.parse(cjProduct.reviews) 
          : cjProduct.reviews;
        console.log(`   - Reviews: ‚úÖ ${reviews.length} avis sauvegard√©s`);
      } catch (e) {
        console.log(`   - Reviews: ‚ùå Erreur parsing: ${e.message}`);
      }
    } else {
      console.log('   - Reviews: ‚ùå Manquants');
    }

    // Tags
    console.log('üè∑Ô∏è Tags:');
    if (cjProduct.tags) {
      try {
        const tags = typeof cjProduct.tags === 'string' 
          ? JSON.parse(cjProduct.tags) 
          : cjProduct.tags;
        console.log(`   - Tags: ‚úÖ ${tags.length} tags sauvegard√©s`);
      } catch (e) {
        console.log(`   - Tags: ‚ùå Erreur parsing: ${e.message}`);
      }
    } else {
      console.log('   - Tags: ‚ùå Manquants');
    }

    // Autres infos
    console.log('');
    console.log('üìê Autres informations:');
    console.log(`   - Dimensions: ${cjProduct.dimensions ? '‚úÖ' : '‚ùå'} ${cjProduct.dimensions || 'Manquantes'}`);
    console.log(`   - Brand: ${cjProduct.brand ? '‚úÖ' : '‚ùå'} ${cjProduct.brand || 'Manquante'}`);
    console.log(`   - Creator Time: ${cjProduct.createrTime ? '‚úÖ' : '‚ùå'} ${cjProduct.createrTime || 'Manquant'}`);
    console.log('');

    // 3. V√©rifier si le produit est aussi dans le magasin principal
    console.log('üè™ V√©rification dans le magasin principal:');
    const mainProduct = await prisma.product.findFirst({
      where: { name: cjProduct.name },
      include: { supplier: true }
    });

    if (mainProduct) {
      console.log(`   ‚úÖ Pr√©sent dans le magasin principal:`);
      console.log(`      - ID: ${mainProduct.id}`);
      console.log(`      - Nom: ${mainProduct.name}`);
      console.log(`      - Prix: $${mainProduct.price}`);
      console.log(`      - Status: ${mainProduct.status}`);
      console.log(`      - Fournisseur: ${mainProduct.supplier?.name}`);
      
      // V√©rifier si les d√©tails sont transf√©r√©s
      console.log('\n   üìä Comparaison des donn√©es:');
      console.log(`      - Description: CJ=${!!cjProduct.description} vs Main=${!!mainProduct.description}`);
      console.log(`      - Image: CJ=${!!cjProduct.image} vs Main=${!!mainProduct.imageUrl}`);
    } else {
      console.log('   ‚ùå Pas encore dans le magasin principal');
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkImportCompleteness();