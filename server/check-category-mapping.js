const { PrismaClient } = require('@prisma/client');

async function checkCategoryMapping() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç === V√âRIFICATION MAPPING CAT√âGORIES ===\n');
    
    // 1. V√©rifier le fournisseur CJ
    const cjSupplier = await prisma.supplier.findFirst({
      where: { name: 'CJ Dropshipping' }
    });
    console.log('üè¢ Fournisseur CJ Dropshipping:', cjSupplier ? `ID: ${cjSupplier.id}` : 'NON TROUV√â');
    
    // 2. V√©rifier les produits CJ dans le magasin
    const cjStoreProducts = await prisma.cJProductStore.findMany({
      select: { id: true, name: true, category: true, status: true }
    });
    console.log(`\nüì¶ Produits dans CJProductStore: ${cjStoreProducts.length}`);
    cjStoreProducts.slice(0, 3).forEach(p => {
      console.log(`   - ${p.name} | Cat√©gorie: "${p.category}" | Status: ${p.status}`);
    });
    
    // 3. V√©rifier les produits CJ import√©s dans Product
    const cjProducts = await prisma.product.findMany({
      where: cjSupplier ? { supplierId: cjSupplier.id } : { supplierId: 'cj-dropshipping' },
      select: { id: true, name: true, categoryId: true, source: true },
      take: 5
    });
    console.log(`\nÔøΩÔ∏è Produits CJ import√©s dans Product: ${cjProducts.length}`);
    cjProducts.forEach(p => {
      console.log(`   - ${p.name} | Cat√©gorie ID: ${p.categoryId || 'NULL'} | Source: ${p.source}`);
    });
    
    // 4. V√©rifier les cat√©gories non mapp√©es
    const unmappedCategories = await prisma.unmappedExternalCategory.findMany({
      where: cjSupplier ? { supplierId: cjSupplier.id } : { supplierId: 'cj-dropshipping' }
    });
    console.log(`\nüè∑Ô∏è Cat√©gories non mapp√©es pour CJ: ${unmappedCategories.length}`);
    unmappedCategories.forEach(cat => {
      console.log(`   - "${cat.externalCategory}" | Produits: ${cat.productCount} | Supplier ID: ${cat.supplierId}`);
    });
    
    // 5. V√©rifier TOUTES les cat√©gories non mapp√©es (au cas o√π il y aurait un probl√®me d'ID)
    const allUnmappedCategories = await prisma.unmappedExternalCategory.findMany();
    console.log(`\nüìã TOUTES les cat√©gories non mapp√©es: ${allUnmappedCategories.length}`);
    allUnmappedCategories.forEach(cat => {
      console.log(`   - "${cat.externalCategory}" | Produits: ${cat.productCount} | Supplier ID: ${cat.supplierId}`);
    });
    
    // 6. V√©rifier les mappings existants
    const existingMappings = await prisma.categoryMapping.findMany({
      where: cjSupplier ? { supplierId: cjSupplier.id } : { supplierId: 'cj-dropshipping' }
    });
    console.log(`\nüîó Mappings existants pour CJ: ${existingMappings.length}`);
        console.log(`   - Cr√©√©: ${product.createdAt}`);
        console.log('   ---');
      });
    }
    
    // 2. V√©rifier les produits CJ avec diff√©rentes variations de cette cat√©gorie
    const cjProducts = await prisma.cJProductStore.findMany({
      where: {
        category: {
          contains: "Men's Clothing"
        }
      }
    });
    
    console.log(`\nüì¶ Produits CJ avec cat√©gorie similaire: ${cjProducts.length}`);
    
    if (cjProducts.length > 0) {
      console.log('\nüìã D√©tails des produits CJ:');
      cjProducts.forEach((product, index) => {
        console.log(`${index + 1}. ${product.name.substring(0, 50)}...`);
        console.log(`   - Status: ${product.status}`);
        console.log(`   - Cat√©gorie: ${product.category}`);
        console.log(`   - Cr√©√©: ${product.createdAt}`);
        console.log('   ---');
      });
    }
    
    // 3. V√©rifier tous les produits par status
    const statusCounts = await prisma.product.groupBy({
      by: ['status'],
      _count: {
        id: true
      }
    });
    
    console.log('\nüìä R√©partition des produits par status:');
    statusCounts.forEach(group => {
      console.log(`   - ${group.status}: ${group._count.id} produits`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkCategoryMapping();