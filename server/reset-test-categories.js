const { PrismaClient } = require('@prisma/client');

async function resetAndTestCategoriesMapping() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîÑ === RESET ET TEST MAPPING CAT√âGORIES ===\n');
    
    const cjSupplier = await prisma.supplier.findFirst({
      where: { name: 'CJ Dropshipping' }
    });
    
    // 1. Supprimer les cat√©gories non mapp√©es existantes
    const deletedCategories = await prisma.unmappedExternalCategory.deleteMany({
      where: { supplierId: cjSupplier.id }
    });
    console.log(`üóëÔ∏è ${deletedCategories.count} cat√©gories non mapp√©es supprim√©es`);
    
    // 2. Remettre les produits du magasin en available
    const resetStore = await prisma.cJProductStore.updateMany({
      where: { status: 'imported' },
      data: { status: 'available' }
    });
    console.log(`üîÑ ${resetStore.count} produits remis en 'available'`);
    
    // 3. V√©rifier l'√©tat avant nouvel import
    const storeProducts = await prisma.cJProductStore.findMany({
      where: { status: 'available' },
      select: { name: true, category: true }
    });
    
    console.log(`\nüì¶ Produits pr√™ts pour re-import: ${storeProducts.length}`);
    
    // 4. Lister toutes les cat√©gories uniques
    const uniqueCategories = [...new Set(storeProducts.map(p => p.category).filter(Boolean))];
    console.log(`\nüè∑Ô∏è Cat√©gories uniques √† mapper: ${uniqueCategories.length}`);
    uniqueCategories.forEach(cat => {
      console.log(`   - "${cat}"`);
    });
    
    console.log('\n‚úÖ √âtat reset√© ! Maintenant :');
    console.log('1. Allez sur la page fournisseurs');
    console.log('2. Cliquez "Importer" pour CJ');
    console.log('3. V√©rifiez la page Cat√©gories pour voir les cat√©gories externes');
    console.log('4. Puis ex√©cutez: node check-categories-after-import.js');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

resetAndTestCategoriesMapping();