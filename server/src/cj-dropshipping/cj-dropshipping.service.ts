import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CJAPIClient } from './cj-api-client';

@Injectable()
export class CJDropshippingService {
  private readonly logger = new Logger(CJDropshippingService.name);
  private readonly cjApiClient: CJAPIClient;

  constructor(private prisma: PrismaService) {
    this.cjApiClient = new CJAPIClient();
  }

  async getCJCategories() {
    try {
      this.logger.log('üîç R√©cup√©ration des cat√©gories CJ...');
      const categories = await this.cjApiClient.getCategories();
      
      this.logger.log(`‚úÖ ${categories.length} cat√©gories r√©cup√©r√©es`);
      return {
        success: true,
        data: categories
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur r√©cup√©ration cat√©gories CJ:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  async searchCJProducts(searchParams: any) {
    try {
      this.logger.log('üîç Recherche produits CJ avec param√®tres:', searchParams);
      
      // V√©rifier que la cl√© API est configur√©e
      if (!process.env.CJ_API_KEY || process.env.CJ_API_KEY === 'your_cj_api_key_here') {
        this.logger.error('‚ùå Cl√© API CJ non configur√©e');
        return {
          success: false,
          error: 'Cl√© API CJ non configur√©e. Veuillez configurer CJ_API_KEY dans les variables d\'environnement.'
        };
      }

      // Convertir les param√®tres vers le format CJ
      const cjParams = {
        productName: searchParams.productName,
        categoryId: searchParams.categoryId,
        minPrice: searchParams.minPrice,
        maxPrice: searchParams.maxPrice,
        pageNum: searchParams.pageNum || 1,
        pageSize: searchParams.pageSize || 50,
        countryCode: searchParams.countryCode,
        startInventory: searchParams.startInventory,
        deliveryTime: searchParams.deliveryTime,
        isFreeShipping: searchParams.isFreeShipping,
        productType: searchParams.productType,
        sort: searchParams.sort,
        orderBy: searchParams.orderBy
      };

      this.logger.log('üîó Tentative de connexion √† l\'API CJ...');
      const products = await this.cjApiClient.searchProducts(cjParams);
      
      this.logger.log(`‚úÖ ${products.list?.length || 0} produits trouv√©s`);
      return {
        success: true,
        data: products
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur recherche produits CJ:', error);
      
      // Messages d'erreur plus sp√©cifiques
      let errorMessage = 'Erreur inconnue';
      if (error instanceof Error) {
        if (error.message.includes('ENOTFOUND')) {
          errorMessage = 'Impossible de se connecter √† l\'API CJ Dropshipping. V√©rifiez votre connexion internet.';
        } else if (error.message.includes('401')) {
          errorMessage = 'Cl√© API CJ invalide. V√©rifiez votre configuration.';
        } else if (error.message.includes('403')) {
          errorMessage = 'Acc√®s refus√© √† l\'API CJ. V√©rifiez vos permissions.';
        } else {
          errorMessage = error.message;
        }
      }
      
      return {
        success: false,
        error: errorMessage
      };
    }
  }

  async getCJProductDetails(pid: string) {
    try {
      this.logger.log(`üîç R√©cup√©ration d√©tails produit CJ: ${pid}`);
      const product = await this.cjApiClient.getProductDetails(pid);
      
      this.logger.log(`‚úÖ D√©tails produit ${pid} r√©cup√©r√©s`);
      return {
        success: true,
        data: product
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur d√©tails produit CJ ${pid}:`, error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  async importCJProduct(importData: any) {
    try {
      this.logger.log('üì• Import produit CJ:', importData);
      
      // V√©rifier si le produit existe d√©j√†
      const existingProduct = await this.prisma.product.findFirst({
        where: {
          cjMapping: {
            cjProductId: importData.pid
          }
        }
      });

      if (existingProduct) {
        this.logger.warn(`‚ö†Ô∏è Produit ${importData.pid} d√©j√† import√©`);
        return {
          success: false,
          error: 'Produit d√©j√† import√©'
        };
      }

      // R√©cup√©rer les d√©tails du produit depuis CJ
      const cjProduct = await this.cjApiClient.getProductDetails(importData.pid);
      
      if (!cjProduct) {
        return {
          success: false,
          error: 'Produit non trouv√© sur CJ'
        };
      }

      // Cr√©er le produit dans la base locale
      const product = await this.prisma.product.create({
        data: {
          name: cjProduct.productNameEn || cjProduct.productName,
          description: cjProduct.productDescriptionEn || cjProduct.productDescription || '',
          price: parseFloat(cjProduct.sellPrice),
          originalPrice: cjProduct.originalPrice ? parseFloat(cjProduct.originalPrice) : null,
          image: cjProduct.productImage,
          categoryId: importData.categoryId || null,
          supplierId: importData.supplierId || null,
          source: 'cj-dropshipping',
          status: 'draft',
          stock: 0,
          sales: 0,
          cjMapping: {
            create: {
              cjProductId: importData.pid,
              cjSku: cjProduct.productSku,
              lastSyncAt: new Date()
            }
          }
        },
        include: {
          cjMapping: true
        }
      });

      this.logger.log(`‚úÖ Produit ${importData.pid} import√© avec succ√®s`);
      return {
        success: true,
        data: product
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur import produit CJ:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  async getCJProductStock(pid: string, countryCode: string = 'US') {
    try {
      this.logger.log(`üìä R√©cup√©ration stock produit CJ ${pid} pour ${countryCode}`);
      const stock = await this.cjApiClient.getProductStock(pid, countryCode);
      
      return {
        success: true,
        data: stock
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur stock produit CJ ${pid}:`, error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  async getCJConfig() {
    try {
      // R√©cup√©rer la configuration depuis la base de donn√©es
      const config = await this.prisma.cJConfig.findFirst();
      
      if (config) {
        return {
          success: true,
          data: {
            id: config.id,
            email: config.email,
            apiKey: config.apiKey ? '***' + config.apiKey.slice(-4) : 'not configured',
            tier: config.tier,
            platformToken: config.platformToken,
            enabled: config.enabled,
            connected: !!config.apiKey,
            lastSync: config.updatedAt,
            createdAt: config.createdAt,
            updatedAt: config.updatedAt
          }
        };
      } else {
        // Aucune configuration trouv√©e
        return {
          success: true,
          data: {
            id: null,
            email: 'Non configur√©',
            apiKey: 'not configured',
            tier: 'unconfigured',
            platformToken: null,
            enabled: false,
            connected: false,
            lastSync: null,
            createdAt: null,
            updatedAt: null
          }
        };
      }
    } catch (error) {
      this.logger.error('‚ùå Erreur config CJ:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  async updateCJConfig(configData: any) {
    try {
      this.logger.log('üîß Mise √† jour configuration CJ:', configData);
      
      // V√©rifier si une configuration existe d√©j√†
      const existingConfig = await this.prisma.cJConfig.findFirst();
      
      let config;
      if (existingConfig) {
        // Mettre √† jour la configuration existante
        config = await this.prisma.cJConfig.update({
          where: { id: existingConfig.id },
          data: {
            email: configData.email || existingConfig.email,
            apiKey: configData.apiKey || existingConfig.apiKey,
            tier: configData.tier || existingConfig.tier,
            platformToken: configData.platformToken || existingConfig.platformToken,
            enabled: configData.enabled !== undefined ? configData.enabled : existingConfig.enabled,
            updatedAt: new Date()
          }
        });
      } else {
        // Cr√©er une nouvelle configuration
        config = await this.prisma.cJConfig.create({
          data: {
            email: configData.email || '',
            apiKey: configData.apiKey || '',
            tier: configData.tier || 'free',
            platformToken: configData.platformToken || null,
            enabled: configData.enabled !== undefined ? configData.enabled : true
          }
        });
      }
      
      this.logger.log('‚úÖ Configuration CJ sauvegard√©e:', config);
      
      return {
        success: true,
        message: 'Configuration CJ mise √† jour avec succ√®s',
        data: {
          id: config.id,
          email: config.email,
          apiKey: config.apiKey ? '***' + config.apiKey.slice(-4) : 'not configured',
          tier: config.tier,
          platformToken: config.platformToken,
          enabled: config.enabled,
          connected: !!config.apiKey,
          lastSync: config.updatedAt,
          createdAt: config.createdAt,
          updatedAt: config.updatedAt
        }
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur mise √† jour config CJ:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  async getCJStats() {
    try {
      this.logger.log('üìä R√©cup√©ration statistiques CJ...');
      
      // Compter les produits CJ dans la base locale
      const productCount = await this.prisma.product.count({
        where: { source: 'cj-dropshipping' }
      });

      // Compter les commandes CJ (si vous avez une table orders avec source)
      const orderCount = await this.prisma.order.count({
        where: {
          items: {
            some: {
              product: {
                source: 'cj-dropshipping'
              }
            }
          }
        }
      });

      // V√©rifier le statut de connexion en testant r√©ellement l'API
      let isConnected = false;
      try {
        this.logger.log('üîç [CJ-STATS] D√©but du test de connexion...');
        this.logger.log(`üîë [CJ-STATS] Cl√© API utilis√©e: ${process.env.CJ_API_KEY ? process.env.CJ_API_KEY.substring(0, 8) + '...' : 'NON CONFIGUR√âE'}`);
        this.logger.log(`üåê [CJ-STATS] URL de base: ${process.env.CJ_API_BASE || 'https://developers.cjdropshipping.com/api2.0/v1'}`);
        
        // Test rapide de l'API pour v√©rifier la validit√© de la cl√©
        const testResult = await this.cjApiClient.testConnection();
        this.logger.log(`‚úÖ [CJ-STATS] R√©sultat du test: ${testResult}`);
        isConnected = testResult;
      } catch (error) {
        this.logger.log('‚ùå [CJ-STATS] Test connexion √©chou√©:', error instanceof Error ? error.message : 'Erreur inconnue');
        this.logger.log('‚ùå [CJ-STATS] D√©tails de l\'erreur:', {
          name: error instanceof Error ? error.name : 'Unknown',
          message: error instanceof Error ? error.message : 'Unknown error',
          stack: error instanceof Error ? error.stack : 'No stack trace'
        });
        isConnected = false;
      }
      
      this.logger.log(`üîë [CJ-STATS] API Key configur√©e: ${!!process.env.CJ_API_KEY}`);
      this.logger.log(`üîó [CJ-STATS] Statut connexion: ${isConnected ? 'connect√©' : 'd√©connect√©'}`);
      this.logger.log(`üìä [CJ-STATS] Produits CJ: ${productCount}, Commandes CJ: ${orderCount}`);
      
      return {
        success: true,
        data: {
          status: isConnected ? 'connected' : 'disconnected',
          tier: isConnected ? 'configured' : 'unconfigured',
          products: {
            total: productCount,
            synced: productCount // Pour l'instant, tous les produits sont consid√©r√©s comme synchronis√©s
          },
          orders: {
            total: orderCount,
            active: orderCount // Pour l'instant, toutes les commandes sont consid√©r√©es comme actives
          },
          webhooks: {
            total: 0,
            recent: 0,
            processed: 0
          },
          lastSync: new Date().toISOString(),
          apiKey: process.env.CJ_API_KEY ? '***configured***' : null,
          baseUrl: process.env.CJ_API_BASE || 'https://developers.cjdropshipping.com/api2.0/v1'
        }
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur statistiques CJ:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  async testCJConnection() {
    try {
      this.logger.log('üîó Test connexion CJ Dropshipping...');
      const testResult = await this.cjApiClient.testConnection();
      
      return {
        success: testResult,
        message: testResult ? 'Connexion CJ r√©ussie' : 'Connexion CJ √©chou√©e'
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur test connexion CJ:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }
}