import { Controller, Get, Logger, Post } from '@nestjs/common';
import { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';
import { CJCategoriesService } from './cj-categories.service';

@ApiTags('CJ Categories')
@Controller('api/cj-dropshipping/categories')
export class CJCategoriesController {
  private readonly logger = new Logger(CJCategoriesController.name);

  constructor(private readonly cjCategoriesService: CJCategoriesService) {}

  @Get()
  @ApiOperation({ summary: 'R√©cup√©rer toutes les cat√©gories CJ' })
  @ApiResponse({ status: 200, description: 'Cat√©gories r√©cup√©r√©es avec succ√®s' })
  async getAllCategories() {
    try {
      this.logger.log('üè∑Ô∏è === D√âBUT CONTR√îLEUR CAT√âGORIES ===');
      this.logger.log('üìû Appel du service getAllCategories...');
      
      const categories = await this.cjCategoriesService.getAllCategories();
      
      this.logger.log('‚úÖ Service termin√©, cat√©gories re√ßues:', categories.length);
      this.logger.log('üìã Premi√®res cat√©gories:', categories.slice(0, 3));
      
      return {
        success: true,
        categories: categories,
        total: categories.length,
        message: `${categories.length} cat√©gories r√©cup√©r√©es`
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur r√©cup√©ration cat√©gories: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error.stack : 'N/A');
      return {
        success: false,
        categories: [],
        total: 0,
        message: `Erreur: ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }

  @Get('tree')
  @ApiOperation({ summary: 'R√©cup√©rer l\'arbre des cat√©gories CJ' })
  @ApiResponse({ status: 200, description: 'Arbre des cat√©gories r√©cup√©r√© avec succ√®s' })
  async getCategoriesTree() {
    try {
      this.logger.log('üå≥ R√©cup√©ration de l\'arbre des cat√©gories CJ...');
      const tree = await this.cjCategoriesService.getCategoriesTree();
      
      return {
        success: true,
        tree: tree,
        message: 'Arbre des cat√©gories r√©cup√©r√©'
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur r√©cup√©ration arbre: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error.stack : 'N/A');
      return {
        success: false,
        tree: [],
        message: `Erreur: ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }

  @Post('test')
  @ApiOperation({ summary: 'Tester la r√©cup√©ration des cat√©gories CJ' })
  @ApiResponse({ status: 200, description: 'Test de r√©cup√©ration des cat√©gories' })
  async testCategoriesRetrieval() {
    try {
      this.logger.log('üß™ Test de r√©cup√©ration des cat√©gories CJ...');
      const result = await this.cjCategoriesService.testCategoriesRetrieval();
      
      return result;
    } catch (error) {
      this.logger.error(`‚ùå Erreur test cat√©gories: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error.stack : 'N/A');
      return {
        success: false,
        categories: [],
        message: `Erreur lors du test: ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }

  @Post('sync')
  @ApiOperation({ summary: 'Synchroniser les cat√©gories CJ avec la base de donn√©es' })
  @ApiResponse({ status: 200, description: 'Cat√©gories synchronis√©es avec succ√®s' })
  async syncCategories() {
    try {
      this.logger.log('üîÑ === D√âBUT SYNCHRONISATION CAT√âGORIES CJ ===');
      this.logger.log('üìû Appel du service getAllCategories...');
      
      const categories = await this.cjCategoriesService.getAllCategories();
      
      this.logger.log('‚úÖ Synchronisation termin√©e, cat√©gories re√ßues:', categories.length);
      this.logger.log('üìã Premi√®res cat√©gories:', categories.slice(0, 3));
      
      return {
        success: true,
        categories: categories,
        total: categories.length,
        message: `${categories.length} cat√©gories synchronis√©es avec succ√®s`
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur synchronisation cat√©gories: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error.stack : 'N/A');
      return {
        success: false,
        categories: [],
        total: 0,
        message: `Erreur lors de la synchronisation: ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }
}